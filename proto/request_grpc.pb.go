// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: proto/request.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommandServiceClient is the client API for CommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommandServiceClient interface {
	AddNode(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandResponse, error)
}

type commandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommandServiceClient(cc grpc.ClientConnInterface) CommandServiceClient {
	return &commandServiceClient{cc}
}

func (c *commandServiceClient) AddNode(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, "/CommandService/AddNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommandServiceServer is the server API for CommandService service.
// All implementations should embed UnimplementedCommandServiceServer
// for forward compatibility
type CommandServiceServer interface {
	AddNode(context.Context, *Command) (*CommandResponse, error)
}

// UnimplementedCommandServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCommandServiceServer struct {
}

func (UnimplementedCommandServiceServer) AddNode(context.Context, *Command) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNode not implemented")
}

// UnsafeCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommandServiceServer will
// result in compilation errors.
type UnsafeCommandServiceServer interface {
	mustEmbedUnimplementedCommandServiceServer()
}

func RegisterCommandServiceServer(s grpc.ServiceRegistrar, srv CommandServiceServer) {
	s.RegisterService(&CommandService_ServiceDesc, srv)
}

func _CommandService_AddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServiceServer).AddNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CommandService/AddNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServiceServer).AddNode(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

// CommandService_ServiceDesc is the grpc.ServiceDesc for CommandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CommandService",
	HandlerType: (*CommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNode",
			Handler:    _CommandService_AddNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/request.proto",
}

// LeaderServiceClient is the client API for LeaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeaderServiceClient interface {
	GetLeader(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Leader, error)
}

type leaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaderServiceClient(cc grpc.ClientConnInterface) LeaderServiceClient {
	return &leaderServiceClient{cc}
}

func (c *leaderServiceClient) GetLeader(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Leader, error) {
	out := new(Leader)
	err := c.cc.Invoke(ctx, "/LeaderService/GetLeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeaderServiceServer is the server API for LeaderService service.
// All implementations should embed UnimplementedLeaderServiceServer
// for forward compatibility
type LeaderServiceServer interface {
	GetLeader(context.Context, *emptypb.Empty) (*Leader, error)
}

// UnimplementedLeaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedLeaderServiceServer struct {
}

func (UnimplementedLeaderServiceServer) GetLeader(context.Context, *emptypb.Empty) (*Leader, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeader not implemented")
}

// UnsafeLeaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeaderServiceServer will
// result in compilation errors.
type UnsafeLeaderServiceServer interface {
	mustEmbedUnimplementedLeaderServiceServer()
}

func RegisterLeaderServiceServer(s grpc.ServiceRegistrar, srv LeaderServiceServer) {
	s.RegisterService(&LeaderService_ServiceDesc, srv)
}

func _LeaderService_GetLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaderServiceServer).GetLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LeaderService/GetLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaderServiceServer).GetLeader(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// LeaderService_ServiceDesc is the grpc.ServiceDesc for LeaderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeaderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "LeaderService",
	HandlerType: (*LeaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLeader",
			Handler:    _LeaderService_GetLeader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/request.proto",
}
